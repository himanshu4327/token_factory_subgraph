// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Contract__getAllTokensByOwnerResult {
  value0: Array<Address>;
  value1: Array<i32>;

  constructor(value0: Array<Address>, value1: Array<i32>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromI32Array(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<i32> {
    return this.value1;
  }
}

export class Contract__getTokenByOwnerAddressAndIndexResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class Contract__getTokenInfoResult {
  value0: string;
  value1: string;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: string, value1: string, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValue0(): string {
    return this.value0;
  }

  getValue1(): string {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  getAllAllowedFactories(): Array<Address> {
    let result = super.call(
      "getAllAllowedFactories",
      "getAllAllowedFactories():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllAllowedFactories(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllAllowedFactories",
      "getAllAllowedFactories():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllTokensByOwner(owner: Address): Contract__getAllTokensByOwnerResult {
    let result = super.call(
      "getAllTokensByOwner",
      "getAllTokensByOwner(address):(address[],uint8[])",
      [ethereum.Value.fromAddress(owner)]
    );

    return new Contract__getAllTokensByOwnerResult(
      result[0].toAddressArray(),
      result[1].toI32Array()
    );
  }

  try_getAllTokensByOwner(
    owner: Address
  ): ethereum.CallResult<Contract__getAllTokensByOwnerResult> {
    let result = super.tryCall(
      "getAllTokensByOwner",
      "getAllTokensByOwner(address):(address[],uint8[])",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getAllTokensByOwnerResult(
        value[0].toAddressArray(),
        value[1].toI32Array()
      )
    );
  }

  getAllTokensByType(tokenType: i32): Array<Address> {
    let result = super.call(
      "getAllTokensByType",
      "getAllTokensByType(uint8):(address[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenType))]
    );

    return result[0].toAddressArray();
  }

  try_getAllTokensByType(tokenType: i32): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllTokensByType",
      "getAllTokensByType(uint8):(address[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenType))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getTokenByOwnerAddressAndIndex(
    owner: Address,
    index: BigInt
  ): Contract__getTokenByOwnerAddressAndIndexResult {
    let result = super.call(
      "getTokenByOwnerAddressAndIndex",
      "getTokenByOwnerAddressAndIndex(address,uint256):(address,uint8)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return new Contract__getTokenByOwnerAddressAndIndexResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getTokenByOwnerAddressAndIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<Contract__getTokenByOwnerAddressAndIndexResult> {
    let result = super.tryCall(
      "getTokenByOwnerAddressAndIndex",
      "getTokenByOwnerAddressAndIndex(address,uint256):(address,uint8)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getTokenByOwnerAddressAndIndexResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  getTokenInfo(_token: Address): Contract__getTokenInfoResult {
    let result = super.call(
      "getTokenInfo",
      "getTokenInfo(address):(string,string,uint256,uint256)",
      [ethereum.Value.fromAddress(_token)]
    );

    return new Contract__getTokenInfoResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getTokenInfo(
    _token: Address
  ): ethereum.CallResult<Contract__getTokenInfoResult> {
    let result = super.tryCall(
      "getTokenInfo",
      "getTokenInfo(address):(string,string,uint256,uint256)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__getTokenInfoResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getTokensByOwnerAndType(owner: Address, tokenType: i32): Array<Address> {
    let result = super.call(
      "getTokensByOwnerAndType",
      "getTokensByOwnerAndType(address,uint8):(address[])",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenType))
      ]
    );

    return result[0].toAddressArray();
  }

  try_getTokensByOwnerAndType(
    owner: Address,
    tokenType: i32
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getTokensByOwnerAndType",
      "getTokensByOwnerAndType(address,uint8):(address[])",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(tokenType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isTokenGenerated(token: Address): boolean {
    let result = super.call(
      "isTokenGenerated",
      "isTokenGenerated(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBoolean();
  }

  try_isTokenGenerated(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTokenGenerated",
      "isTokenGenerated(address):(bool)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddTokenFactoriesCall extends ethereum.Call {
  get inputs(): AddTokenFactoriesCall__Inputs {
    return new AddTokenFactoriesCall__Inputs(this);
  }

  get outputs(): AddTokenFactoriesCall__Outputs {
    return new AddTokenFactoriesCall__Outputs(this);
  }
}

export class AddTokenFactoriesCall__Inputs {
  _call: AddTokenFactoriesCall;

  constructor(call: AddTokenFactoriesCall) {
    this._call = call;
  }

  get factories(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddTokenFactoriesCall__Outputs {
  _call: AddTokenFactoriesCall;

  constructor(call: AddTokenFactoriesCall) {
    this._call = call;
  }
}

export class AddTokenFactoryCall extends ethereum.Call {
  get inputs(): AddTokenFactoryCall__Inputs {
    return new AddTokenFactoryCall__Inputs(this);
  }

  get outputs(): AddTokenFactoryCall__Outputs {
    return new AddTokenFactoryCall__Outputs(this);
  }
}

export class AddTokenFactoryCall__Inputs {
  _call: AddTokenFactoryCall;

  constructor(call: AddTokenFactoryCall) {
    this._call = call;
  }

  get factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTokenFactoryCall__Outputs {
  _call: AddTokenFactoryCall;

  constructor(call: AddTokenFactoryCall) {
    this._call = call;
  }
}

export class RemoveTokenFactoryCall extends ethereum.Call {
  get inputs(): RemoveTokenFactoryCall__Inputs {
    return new RemoveTokenFactoryCall__Inputs(this);
  }

  get outputs(): RemoveTokenFactoryCall__Outputs {
    return new RemoveTokenFactoryCall__Outputs(this);
  }
}

export class RemoveTokenFactoryCall__Inputs {
  _call: RemoveTokenFactoryCall;

  constructor(call: RemoveTokenFactoryCall) {
    this._call = call;
  }

  get factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveTokenFactoryCall__Outputs {
  _call: RemoveTokenFactoryCall;

  constructor(call: RemoveTokenFactoryCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetTokenDetailCall extends ethereum.Call {
  get inputs(): SetTokenDetailCall__Inputs {
    return new SetTokenDetailCall__Inputs(this);
  }

  get outputs(): SetTokenDetailCall__Outputs {
    return new SetTokenDetailCall__Outputs(this);
  }
}

export class SetTokenDetailCall__Inputs {
  _call: SetTokenDetailCall;

  constructor(call: SetTokenDetailCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenType(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class SetTokenDetailCall__Outputs {
  _call: SetTokenDetailCall;

  constructor(call: SetTokenDetailCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
